name: Test PowerShell Profile

on:
  push:
    branches:
      - '**'  # Trigger on every push to any branch
  pull_request:
    branches:
      - '**'  # Trigger on pull requests to any branch

jobs:
  test-pwsh-profile:
    runs-on: windows-latest
    timeout-minutes: 30  # Set a higher timeout for long operations

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Test network connectivity before proceeding
      - name: Test Network Connectivity to GitHub
        run: |
          try {
            $response = iwr "https://github.com" -TimeoutSec 10
            Write-Host "Network connectivity is OK."
          } catch {
            Write-Error "Network connectivity issue: $($_.Exception.Message)"
            exit 1
          }
        shell: pwsh

      - name: Initial PowerShell Profile Installation
        run: |
          $retryCount = 0
          $maxRetries = 3
          while ($retryCount -lt $maxRetries) {
            try {
              if ($env:GITHUB_ACTIONS) {
                Write-Host "Running in GitHub Actions environment. Skipping unnecessary initializations..."
              } else {
                Write-Host "Starting profile installation..."
                $response = iwr "https://raw.githubusercontent.com/CrazyWolf13/unix-pwsh/main/Microsoft.PowerShell_profile.ps1" -TimeoutSec 15 -ErrorAction Stop
                iex $response.Content
              }
              Write-Host "Profile installation succeeded."
              break
            } catch {
              Write-Warning "Profile installation failed. Retrying... ($($retryCount + 1)/$maxRetries)"
              $retryCount++
              if ($retryCount -eq $maxRetries) {
                Write-Error "Profile installation failed after $maxRetries attempts. Error: $($_.Exception.Message)"
                exit 1
              }
              Start-Sleep -Seconds 5  # Wait 5 seconds before retrying
            }
          }
        shell: pwsh

      - name: Delete unix-pwsh directory if exists
        run: |
          $profileDir = Join-Path -Path $env:USERPROFILE -ChildPath "unix-pwsh"
          if (Test-Path $profileDir) {
            Remove-Item -Recurse -Force $profileDir
            Write-Host "Deleted unix-pwsh directory."
          } else {
            Write-Host "No unix-pwsh directory found."
          }
        shell: pwsh

      - name: Reattempt PowerShell Profile Installation
        run: |
          $retryCount = 0
          $maxRetries = 3
          while ($retryCount -lt $maxRetries) {
            try {
              Write-Host "Reattempting profile installation..."
              $response = iwr "https://raw.githubusercontent.com/CrazyWolf13/unix-pwsh/main/Microsoft.PowerShell_profile.ps1" -TimeoutSec 15 -ErrorAction Stop
              iex $response.Content
              Write-Host "Profile reinstallation succeeded."
              break
            } catch {
              Write-Warning "Profile reinstallation failed. Retrying... ($($retryCount + 1)/$maxRetries)"
              $retryCount++
              if ($retryCount -eq $maxRetries) {
                Write-Error "Profile reinstallation failed after $maxRetries attempts. Error: $($_.Exception.Message)"
                exit 1
              }
              Start-Sleep -Seconds 5  # Wait 5 seconds before retrying
            }
          }
        shell: pwsh

      - name: Test PowerShell Profile Modules and FiraCode Nerd Font
        run: |
          # Check if each module is loaded
          $modules = @('sudo', 'oh-my-posh', 'powershell-yaml', 'Terminal-Icons', 'PoshFunctions')
          foreach ($module in $modules) {
            if (Get-Module -ListAvailable -Name $module) {
              Write-Host "$module is installed."
            } else {
              Write-Error "$module is NOT installed!"
              exit 1
            }
          }

          # Check if FiraCode Nerd Font is installed
          $fontCheck = Get-ChildItem -Path "$env:SystemRoot\Fonts" -Recurse | Where-Object { $_.Name -match "FiraCode.*Nerd.*\.ttf" }
          if ($fontCheck) {
            Write-Host "FiraCode Nerd Font is installed."
          } else {
            Write-Error "FiraCode Nerd Font is NOT installed!"
            exit 1
          }
        shell: pwsh
